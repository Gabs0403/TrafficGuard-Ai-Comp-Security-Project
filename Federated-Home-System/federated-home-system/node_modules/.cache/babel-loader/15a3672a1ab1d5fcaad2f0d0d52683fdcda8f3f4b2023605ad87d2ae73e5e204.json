{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ph-mo\\\\OneDrive\\\\Desktop\\\\2024\\\\Federated-Home-System\\\\Federated-Home-System\\\\federated-home-system\\\\src\\\\components\\\\console.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConsoleOutput = () => {\n  _s();\n  const [logs, setLogs] = useState('');\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchLogs = async () => {\n      try {\n        const response = await fetch('http://127.0.0.1:5000/api/logs'); // Flask API endpoint\n        const data = await response.json();\n        if (data.status === 'Success') {\n          setLogs(data.logs); // Set the logs received from the API\n        } else {\n          console.error('Error fetching logs:', data.error);\n          setLogs('Error fetching logs. Please try again later.');\n        }\n      } catch (error) {\n        console.error('Error:', error);\n        setLogs('Failed to fetch logs. Please check your connection.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchLogs();\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading logs...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card mb-4\",\n    style: {\n      maxHeight: '300px',\n      overflowY: 'auto',\n      backgroundColor: '#303030',\n      // Terminal background color\n      color: '#000',\n      // Terminal green text\n      fontFamily: 'Courier, monospace',\n      // Terminal font\n      padding: '10px',\n      border: '1px solid #333',\n      whiteSpace: 'pre-wrap'\n    },\n    children: logs\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(ConsoleOutput, \"jPU2zU/MZr1TRUl7h7xounUog9g=\");\n_c = ConsoleOutput;\nexport default ConsoleOutput;\nvar _c;\n$RefreshReg$(_c, \"ConsoleOutput\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ConsoleOutput","_s","logs","setLogs","loading","setLoading","fetchLogs","response","fetch","data","json","status","console","error","children","fileName","_jsxFileName","lineNumber","columnNumber","className","style","maxHeight","overflowY","backgroundColor","color","fontFamily","padding","border","whiteSpace","_c","$RefreshReg$"],"sources":["C:/Users/ph-mo/OneDrive/Desktop/2024/Federated-Home-System/Federated-Home-System/federated-home-system/src/components/console.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst ConsoleOutput = () => {\r\n  const [logs, setLogs] = useState('');\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchLogs = async () => {\r\n      try {\r\n        const response = await fetch('http://127.0.0.1:5000/api/logs'); // Flask API endpoint\r\n        const data = await response.json();\r\n        if (data.status === 'Success') {\r\n          setLogs(data.logs); // Set the logs received from the API\r\n        } else {\r\n          console.error('Error fetching logs:', data.error);\r\n          setLogs('Error fetching logs. Please try again later.');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error:', error);\r\n        setLogs('Failed to fetch logs. Please check your connection.');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchLogs();\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return <p>Loading logs...</p>;\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className=\"card mb-4\"\r\n      style={{\r\n        maxHeight: '300px',\r\n        overflowY: 'auto',\r\n        backgroundColor: '#303030', // Terminal background color\r\n        color: '#000', // Terminal green text\r\n        fontFamily: 'Courier, monospace', // Terminal font\r\n        padding: '10px',\r\n        border: '1px solid #333',\r\n        whiteSpace: 'pre-wrap',\r\n      }}\r\n    >\r\n      {logs}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ConsoleOutput;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd,MAAMS,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAgC,CAAC,CAAC,CAAC;QAChE,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAClC,IAAID,IAAI,CAACE,MAAM,KAAK,SAAS,EAAE;UAC7BR,OAAO,CAACM,IAAI,CAACP,IAAI,CAAC,CAAC,CAAC;QACtB,CAAC,MAAM;UACLU,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEJ,IAAI,CAACI,KAAK,CAAC;UACjDV,OAAO,CAAC,8CAA8C,CAAC;QACzD;MACF,CAAC,CAAC,OAAOU,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;QAC9BV,OAAO,CAAC,qDAAqD,CAAC;MAChE,CAAC,SAAS;QACRE,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDC,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIF,OAAO,EAAE;IACX,oBAAOL,OAAA;MAAAe,QAAA,EAAG;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAC/B;EAEA,oBACEnB,OAAA;IACEoB,SAAS,EAAC,WAAW;IACrBC,KAAK,EAAE;MACLC,SAAS,EAAE,OAAO;MAClBC,SAAS,EAAE,MAAM;MACjBC,eAAe,EAAE,SAAS;MAAE;MAC5BC,KAAK,EAAE,MAAM;MAAE;MACfC,UAAU,EAAE,oBAAoB;MAAE;MAClCC,OAAO,EAAE,MAAM;MACfC,MAAM,EAAE,gBAAgB;MACxBC,UAAU,EAAE;IACd,CAAE;IAAAd,QAAA,EAEDZ;EAAI;IAAAa,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAACjB,EAAA,CA/CID,aAAa;AAAA6B,EAAA,GAAb7B,aAAa;AAiDnB,eAAeA,aAAa;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}